"""
DZ 5_3. Есть два списка:
tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
klasses = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']
Необходимо реализовать генератор, возвращающий кортежи вида (<tutor>, <klass>), например:
('Иван', '9А')
('Анастасия', '7В')
...
Количество генерируемых кортежей не должно быть больше длины списка tutors.
"""


def gen_tuple(g, e, n):
    if n < len(e):
        return g[n], e[n]
    else:
        return g[n], None


tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
klasses = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']

gen = (gen_tuple(tutors, klasses, i) for i in range(len(tutors)))
print('tutors < klasses')
for x in gen:
    print(x)

"""
Если в списке klasses меньше элементов, чем в списке tutors, необходимо вывести последние кортежи в виде: 
(<tutor>, None), например:
('Станислав', None)
"""

_tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена', 'Иван', 'Анастасия', 'Петр', 'Сергей']
_gen = (gen_tuple(_tutors, klasses, i) for i in range(len(_tutors)))
print('\ntutors > klasses')
for x in _gen:
    print(x)

"""
Доказать, что вы создали именно генератор. 
"""

print(gen)

"""
Проверить его работу вплоть до истощения. Подумать, в каких ситуациях генератор даст эффект.
"""
print('\nИстощение генератора _gen')
for x in _gen:
    print(x)
